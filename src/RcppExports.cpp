// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// mult_norm_mcmc
List mult_norm_mcmc(const Rcpp::List& data_list, const Rcpp::List& initial_list, const Rcpp::List& prior_list, const int& block, const int& begin_group_update, const bool& update_omega, const int& burn, const int& iter);
RcppExport SEXP _multAbund_mult_norm_mcmc(SEXP data_listSEXP, SEXP initial_listSEXP, SEXP prior_listSEXP, SEXP blockSEXP, SEXP begin_group_updateSEXP, SEXP update_omegaSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_list(initial_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior_list(prior_listSEXP);
    Rcpp::traits::input_parameter< const int& >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int& >::type begin_group_update(begin_group_updateSEXP);
    Rcpp::traits::input_parameter< const bool& >::type update_omega(update_omegaSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_norm_mcmc(data_list, initial_list, prior_list, block, begin_group_update, update_omega, burn, iter));
    return rcpp_result_gen;
END_RCPP
}
// mult_pois_mcmc
List mult_pois_mcmc(const Rcpp::List& data_list, const Rcpp::List& initial_list, const Rcpp::List& prior_list, const int& block, const int& begin_group_update, const int& burn, const int& iter);
RcppExport SEXP _multAbund_mult_pois_mcmc(SEXP data_listSEXP, SEXP initial_listSEXP, SEXP prior_listSEXP, SEXP blockSEXP, SEXP begin_group_updateSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_list(initial_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior_list(prior_listSEXP);
    Rcpp::traits::input_parameter< const int& >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int& >::type begin_group_update(begin_group_updateSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_pois_mcmc(data_list, initial_list, prior_list, block, begin_group_update, burn, iter));
    return rcpp_result_gen;
END_RCPP
}
// mult_occ_mcmc
List mult_occ_mcmc(const Rcpp::List& data_list, const Rcpp::List& initial_list, const Rcpp::List& prior_list, const int& block, const int& begin_group_update, const bool& update_omega, const int& burn, const int& iter);
RcppExport SEXP _multAbund_mult_occ_mcmc(SEXP data_listSEXP, SEXP initial_listSEXP, SEXP prior_listSEXP, SEXP blockSEXP, SEXP begin_group_updateSEXP, SEXP update_omegaSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_list(initial_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior_list(prior_listSEXP);
    Rcpp::traits::input_parameter< const int& >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int& >::type begin_group_update(begin_group_updateSEXP);
    Rcpp::traits::input_parameter< const bool& >::type update_omega(update_omegaSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_occ_mcmc(data_list, initial_list, prior_list, block, begin_group_update, update_omega, burn, iter));
    return rcpp_result_gen;
END_RCPP
}
// mult_zip_mcmc
List mult_zip_mcmc(const Rcpp::List& data_list, const Rcpp::List& initial_list, const Rcpp::List& prior_list, const int& block, const int& begin_group_update, const bool& update_omega, const int& burn, const int& iter);
RcppExport SEXP _multAbund_mult_zip_mcmc(SEXP data_listSEXP, SEXP initial_listSEXP, SEXP prior_listSEXP, SEXP blockSEXP, SEXP begin_group_updateSEXP, SEXP update_omegaSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_list(initial_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior_list(prior_listSEXP);
    Rcpp::traits::input_parameter< const int& >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int& >::type begin_group_update(begin_group_updateSEXP);
    Rcpp::traits::input_parameter< const bool& >::type update_omega(update_omegaSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_zip_mcmc(data_list, initial_list, prior_list, block, begin_group_update, update_omega, burn, iter));
    return rcpp_result_gen;
END_RCPP
}
// pois_reg_mcmc
List pois_reg_mcmc(const Rcpp::List& data_list, const Rcpp::List& prior_list, const Rcpp::List& initial_list, const int& block, const int& burn, const int& iter);
RcppExport SEXP _multAbund_pois_reg_mcmc(SEXP data_listSEXP, SEXP prior_listSEXP, SEXP initial_listSEXP, SEXP blockSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior_list(prior_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_list(initial_listSEXP);
    Rcpp::traits::input_parameter< const int& >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(pois_reg_mcmc(data_list, prior_list, initial_list, block, burn, iter));
    return rcpp_result_gen;
END_RCPP
}
// probit_reg_mcmc
List probit_reg_mcmc(const Rcpp::List& data_list, const Rcpp::List& prior_list, const Rcpp::List& initial_list, const int& burn, const int& iter);
RcppExport SEXP _multAbund_probit_reg_mcmc(SEXP data_listSEXP, SEXP prior_listSEXP, SEXP initial_listSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior_list(prior_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_list(initial_listSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(probit_reg_mcmc(data_list, prior_list, initial_list, burn, iter));
    return rcpp_result_gen;
END_RCPP
}
// zip_reg_mcmc
List zip_reg_mcmc(const Rcpp::List& data_list, const Rcpp::List& prior_list, const Rcpp::List& initial_list, const int& block, const int& burn, const int& iter);
RcppExport SEXP _multAbund_zip_reg_mcmc(SEXP data_listSEXP, SEXP prior_listSEXP, SEXP initial_listSEXP, SEXP blockSEXP, SEXP burnSEXP, SEXP iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type data_list(data_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type prior_list(prior_listSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type initial_list(initial_listSEXP);
    Rcpp::traits::input_parameter< const int& >::type block(blockSEXP);
    Rcpp::traits::input_parameter< const int& >::type burn(burnSEXP);
    Rcpp::traits::input_parameter< const int& >::type iter(iterSEXP);
    rcpp_result_gen = Rcpp::wrap(zip_reg_mcmc(data_list, prior_list, initial_list, block, burn, iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_multAbund_mult_norm_mcmc", (DL_FUNC) &_multAbund_mult_norm_mcmc, 8},
    {"_multAbund_mult_pois_mcmc", (DL_FUNC) &_multAbund_mult_pois_mcmc, 7},
    {"_multAbund_mult_occ_mcmc", (DL_FUNC) &_multAbund_mult_occ_mcmc, 8},
    {"_multAbund_mult_zip_mcmc", (DL_FUNC) &_multAbund_mult_zip_mcmc, 8},
    {"_multAbund_pois_reg_mcmc", (DL_FUNC) &_multAbund_pois_reg_mcmc, 6},
    {"_multAbund_probit_reg_mcmc", (DL_FUNC) &_multAbund_probit_reg_mcmc, 5},
    {"_multAbund_zip_reg_mcmc", (DL_FUNC) &_multAbund_zip_reg_mcmc, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_multAbund(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
